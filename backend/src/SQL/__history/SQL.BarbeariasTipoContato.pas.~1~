unit SQL.BarbeariasTipoContato;

interface

uses
  SQL.Base, System.SysUtils, System.StrUtils;

type
  TSQLBarbeariasTipoContato = class(TSQLBase)
  private
    { private declarations }
  protected
    { protected declarations }
    function GetTabelas: string;
  public
    { public declarations }
    function GetListagem: string;
    function GetTotalRegistros: string;
    function GetListagemVazia: string;
    function GetProximoID: String;
  end;

implementation

uses
  Utils.Strings;

{ TSQLBarbeariasTipoContato }

function TSQLBarbeariasTipoContato.GetListagem: string;
var
  CamposSP: string;
begin
  FParametros.Add('IncluirOrderBy', true);

  Result := 'SELECT * ' + GetTabelas;
end;

function TSQLBarbeariasTipoContato.GetTotalRegistros: string;
begin
  FParametros.Add('IncluirOrderBy', false);

  Result := 'SELECT  ' + '  COUNT(BTC.ID_BTC) AS RECORDS ' + Self.GetTabelas;
end;

function TSQLBarbeariasTipoContato.GetTabelas: string;
var
  FiltroOrderBy: string;
  FiltroUsuario: String;
begin

  Result :=
    'FROM BARBEARIAS_TIPO_CONTATO BTC ' + ifThen(FParametros.GetAsString('codigo').IsEmpty,
    'WHERE BTC.ID_BTC IS NOT NULL ', 'WHERE BTC.ID_BTC = ' + FParametros.GetAsString('codigo')+' ');

  if FParametros.GetAsBoolean('IncluirOrderBy') then
    Result := Result + 'ORDER BY BTC.ID_BTC ';
end;

function TSQLBarbeariasTipoContato.GetListagemVazia: string;
begin
  result :=
    'SELECT id_btc, descr_btc  ' +
    'FROM BARBEARIAS_TIPO_CONTATO WHERE ID_BTC = -1 ';
end;

function TSQLBarbeariasTipoContato.GetProximoID: String;
begin
  result := 'select nextval(''SEQ_BARBEARIAS_TIPO_CONTATO'') as codigo';
end;

end.
